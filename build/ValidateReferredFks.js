var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _DBConnect=require("./DBConnect");var _rhsCommon=require("rhs-common");function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var isEqual=_rhsCommon.PureFunctions.isEqual;var mergeFkData=function mergeFkData(params,logConnectNative){var _ref=params||{},sourceId=_ref.sourceId,targetId=_ref.targetId,referredFks=_ref.referredFks,removeDoc=_ref.delete,model=_ref.model;if(!sourceId||!targetId){throw new Error("Please provide mandatory values [sourceId/targetId/model]");}var props={sourceId:(0,_DBConnect.getObjectId)(sourceId),targetId:(0,_DBConnect.getObjectId)(targetId),sourceType:"MergeFk"};var logs={_id:(0,_DBConnect.getUniqueObjectId)(),sourceId:sourceId,targetId:targetId,table:model._table,delete:removeDoc,date:new Date(),status:"In Progress"};var mergeFkPipeline=_rhsCommon.Pipeline.of("merge-fk").param({});mergeFkPipeline.add(function(){return logConnectNative.insert("FkMergingLogs",logs);});mergeFkPipeline.add(function(){return validateReferredFkData(props,referredFks);});if(removeDoc){mergeFkPipeline.add(function(){return(0,_DBConnect.save)(model,{remove:{_id:props.sourceId}});});}mergeFkPipeline.add(function(){return logConnectNative.update("FkMergingLogs",{_id:logs._id},{$set:{status:"Done"}});});return mergeFkPipeline;};var cascadeData=function cascadeData(params){var _id=params._id,referredFks=params.referredFks;var props={sourceId:(0,_DBConnect.getObjectId)(_id),sourceType:"Cascade"};return validateReferredFkData(props,referredFks);};var validateReferredFkData=function validateReferredFkData(params,referredFks){if(!referredFks){return;}var sourceType=params.sourceType,sourceId=params.sourceId;var pipeline=_rhsCommon.Pipeline.of(sourceType).param(params);var _loop=function _loop(referredTable){var referredTableFields=referredFks[referredTable];var _loop2=function _loop2(referredField){var referredFieldInfo=referredTableFields[referredField];var fields=referredFieldInfo.fields,isList=referredFieldInfo.isList;if(!fields){pipeline.add(function(){return(0,_DBConnect.findSimple)(referredTable,{filter:_defineProperty({},referredField+"._id",sourceId),fields:_defineProperty({_id:1},referredField+"._id",1)});},function(accum){var _ref2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},result=_ref2.result;return getSimpleUpdatePipeline(result,referredTable,referredField,referredFieldInfo,params);});}else{var _loop3=function _loop3(innerField){var innerFieldInfo=fields[innerField];if(innerFieldInfo.fields){if(!isList||!innerFieldInfo.isList){throw new Error(sourceType+" >>>>> Field ["+innerField+"] not supported in table >>>>>> "+referredTable+" >>>>>>  fieldInfo >>>>>>> "+JSON.stringify(referredTableFields[referredField]));}var _loop4=function _loop4(innerChildField){if(innerFieldInfo.fields[innerChildField].isList){throw new Error(sourceType+" >>>>> Second Level Field ["+innerChildField+"] not supported in table >>>>>> "+referredTable+" >>>>>>  fieldInfo >>>>>>> "+JSON.stringify(referredTableFields[referredField]));}pipeline.add(function(){var _fields2;return(0,_DBConnect.findSimple)(referredTable,{filter:_defineProperty({},referredField+"."+innerField+"."+innerChildField+"._id",sourceId),fields:(_fields2={_id:1},_defineProperty(_fields2,referredField+"._id",1),_defineProperty(_fields2,referredField+"."+innerField,1),_fields2)});},function(_){var _ref3=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},result=_ref3.result;return getArrayUpdatePipeline(result,referredTable,referredField,referredFieldInfo,innerField,innerChildField,params);});};for(var innerChildField in innerFieldInfo.fields){_loop4(innerChildField);}}else{pipeline.add(function(){var _fields3;return(0,_DBConnect.findSimple)(referredTable,{filter:_defineProperty({},referredField+"."+innerField+"._id",sourceId),fields:(_fields3={_id:1},_defineProperty(_fields3,referredField+"._id",1),_defineProperty(_fields3,referredField+"."+innerField,1),_fields3)});},function(_){var _ref4=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},result=_ref4.result;return getArrayUpdatePipeline(result,referredTable,referredField,referredFieldInfo,innerField,void 0,params);});}};for(var innerField in fields){_loop3(innerField);}}};for(var referredField in referredTableFields){_loop2(referredField);}};for(var referredTable in referredFks){_loop(referredTable);}return pipeline;};var getSimpleUpdatePipeline=function getSimpleUpdatePipeline(mainResult,referredTable,referredField,referredFieldInfo,props){var sourceId=props.sourceId,targetId=props.targetId,sourceType=props.sourceType;var fieldToUpdate=referredField+(referredFieldInfo.isList?".$":"");if(mainResult&&mainResult.length){if(sourceType==="Cascade"){var resultIds=mainResult.map(function(row){return row._id;});throw new Error("Record with id "+sourceId+" is referred in table "+referredTable+" for field "+referredField+" for records "+JSON.stringify(resultIds));}else{var updatePipeline=_rhsCommon.Pipeline.of().param({});mainResult.forEach(function(data){var referredFieldData=data[referredField];if(Array.isArray(referredFieldData)){referredFieldData.forEach(function(row){if(!isEqual(row,sourceId)){return;}updatePipeline.add(function(){return(0,_DBConnect.update)(referredTable,_defineProperty({_id:data._id},referredField+"._id",sourceId),_defineProperty({},fieldToUpdate,{_id:targetId}),void 0,void 0,{skipTx:true});});});}else{updatePipeline.add(function(){return(0,_DBConnect.update)(referredTable,{_id:data._id},_defineProperty({},fieldToUpdate,{_id:targetId}),void 0,void 0,{skipTx:true});});}});return updatePipeline;}}};var getArrayUpdatePipeline=function getArrayUpdatePipeline(mainResult,referredTable,mainField,mainFieldInfo,arrayInnerField,arrayInnerChildField,props){var updatePipeline=_rhsCommon.Pipeline.of().param({});var arrayFieldToUpdate=mainField+(mainFieldInfo.isList?".$":"")+"."+arrayInnerField;mainResult&&mainResult.forEach(function(data){var innerFieldData=data[mainField];if(Array.isArray(innerFieldData)){innerFieldData.forEach(function(innerData){var updateFilter=_defineProperty({_id:data._id},mainField+"._id",innerData._id);populateInnerUpdatePipeline(updatePipeline,referredTable,innerData[arrayInnerField],updateFilter,arrayFieldToUpdate,arrayInnerChildField,props);});}else{var updateFilter={_id:data._id};populateInnerUpdatePipeline(updatePipeline,referredTable,innerFieldData[arrayInnerField],updateFilter,arrayFieldToUpdate,void 0,props);}});return updatePipeline;};var populateInnerUpdatePipeline=function populateInnerUpdatePipeline(pipeline,referredTable,innerData,filter,updateField,innerChildField,props){if(!innerData){return;}var valueToUpdate=getSecondLevelValueToUpdate(innerData,props,innerChildField);if(!valueToUpdate){return;}var sourceId=props.sourceId,sourceType=props.sourceType;if(sourceType==="Cascade"){var errorField=updateField.replace("$","")+(innerChildField?"."+innerChildField:"");throw new Error("Record with id "+sourceId+" is referred in table "+referredTable+" for field "+errorField+" for value "+JSON.stringify(filter));}else{pipeline.add(function(){return(0,_DBConnect.update)(referredTable,filter,_defineProperty({},updateField,valueToUpdate),void 0,void 0,{skipTx:true});});}};var getSecondLevelValueToUpdate=function getSecondLevelValueToUpdate(data,_ref5,matchField){var sourceId=_ref5.sourceId,targetId=_ref5.targetId;if(!data){return;}var updateValue={_id:targetId};if(Array.isArray(data)){var match=false;var modifiedData=data.map(function(row){var matchDoc=matchField?row[matchField]:row;if(isEqual(matchDoc,sourceId)){match=true;if(matchField){return _extends({},row,_defineProperty({},matchField,updateValue));}else{return updateValue;}}else{return row;}});if(match){return modifiedData;}}else if(!matchField){if(isEqual(data,sourceId)){return updateValue;}}};module.exports={mergeFkData:mergeFkData,cascadeData:cascadeData};