Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _rhsCommon=require("rhs-common");function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var ObjectId=require("mongodb").ObjectID;var isMatch=_rhsCommon.PureFunctions.isMatch,isIdFilter=_rhsCommon.PureFunctions.isIdFilter,resolveValue=_rhsCommon.PureFunctions.resolveValue,isJSONObject=_rhsCommon.PureFunctions.isJSONObject;var AllowedUpdatedKeys={$set:1,$unset:1,$inc:1};var InMemoryConnect=function(){function InMemoryConnect(_ref){var config=_ref.config;_classCallCheck(this,InMemoryConnect);this.getFilteredKeys=function(data,filter){if(!data){return[];}var keys=null;var isFilter=filter&&Object.keys(filter);if(isFilter){if(isIdFilter(filter)){var _id=filter["_id"];var value=data[_id];if(value){keys=[_id];}else{keys=[];}}else{keys=Object.keys(data).filter(function(k){return isMatch(data[k],filter);});}}else{keys=Object.keys(data);}return keys;};this.config=config;}_createClass(InMemoryConnect,[{key:"invoke",value:function invoke(){}},{key:"connectDB",value:function connectDB(){var _this=this;return new Promise(function(resolve,reject){if(_this.db){resolve(_this.db);}else{var db={};_this.db=db;resolve(db);}});}},{key:"dropDB",value:function dropDB(){var _this2=this;return new Promise(function(resolve,reject){_this2.db=null;});}},{key:"find",value:function find(table,_ref2){var _this3=this;var filter=_ref2.filter,fields=_ref2.fields;if(!fields){throw new Error("Fields must be passed for find query in table >>"+table+" >> ");}if(!fields["_id"]){throw new Error("_id must be asked in Fields for find query in table >>"+table+" >> fields >>>>"+JSON.stringify(fields));}return this.connectDB().then(function(db){var tableData=db[table];var keys=_this3.getFilteredKeys(tableData,filter);var result=keys.map(function(key){var fieldValues={};var v=tableData[key];populateResult(fields,fieldValues,v);return fieldValues;});return{result:result};});}},{key:"aggregate",value:function aggregate(table,pipeline){var _this4=this;var filter=void 0,group=void 0;for(var _iterator=pipeline,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?Symbol.iterator:"@@iterator"]();;){var _ref3;if(_isArray){if(_i>=_iterator.length)break;_ref3=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref3=_i.value;}var p=_ref3;if(filter===undefined&&p["$match"]){filter=p["$match"];}if(group===undefined&&p["$group"]){group=p["$group"];}if(group!==undefined&&filter!==undefined){break;}}return this.connectDB().then(function(db){var tableData=db[table];var keys=_this4.getFilteredKeys(tableData,filter);var _group=group,groupId=_group._id,restGroupFields=_objectWithoutProperties(_group,["_id"]);var groupByResult=keys.reduce(function(accum,key){var v=tableData[key];var idValue=groupId===null?null:resolveValue(v,groupId.substring(1));accum[idValue]=accum[idValue]||{_id:idValue};for(var obj in restGroupFields){var objInfo=restGroupFields[obj];if(typeof objInfo==="object"&&objInfo.$sum){var sumField=objInfo.$sum;accum[idValue][obj]=(accum[idValue][obj]||0)+(sumField===1?1:v[sumField.substring(1)]||0);}}return accum;},{});var result=Object.keys(groupByResult).map(function(_groupByKey){return groupByResult[_groupByKey];});return{result:result};});}},{key:"insert",value:function insert(table,_insert,subModelChanges){return this.connectDB().then(function(db){var _id=_insert._id;var newValue=_extends({},_insert);db[table]=db[table]||{};if(db[table][_id]){throw new Error("Duplicate key Error >> table>> "+table+" >> _id "+_id);}if(subModelChanges){for(var k in subModelChanges){var changes=subModelChanges[k];if(changes.insert){var nestedArray=changes.insert.map(function(nestedInsert){return _extends({},nestedInsert);});newValue[k]=nestedArray;}}}db[table][_id]=newValue;return{result:newValue};});}},{key:"update",value:function update(table,filter,value){var _this5=this;if(!value){throw new Error("Inmemory connect >>> "+table+" >>> value must be defined for filter >>>"+JSON.stringify(filter));}for(var k in value){if(!AllowedUpdatedKeys[k]){throw new Error("Inmemory connect >>> "+table+" >>> key  must be defined in "+JSON.stringify(AllowedUpdatedKeys)+" for filter >>>"+JSON.stringify(filter)+" but found >>>>"+k);}}return this.connectDB().then(function(db){var isValue=value&&Object.keys(value).length;if(!isValue){throw new Error("Value must be defined in update >> table >>["+table+"] >> filter >>"+JSON.stringify(filter));}if(value._id){throw new Error("_id can not be updated in update >> table >>["+table+"] >> value >>"+JSON.stringify(value));}var isFilter=filter&&Object.keys(filter).length;if(!isFilter){throw new Error("Filter must be defined in update >> table >>["+table+"] >> value >>"+JSON.stringify(value));}return _this5.find(table,{filter:filter,fields:{_id:1}}).then(function(oldData){oldData=oldData.result;if(!oldData||oldData.length==0){return{matched:0,modifed:0};}else if(oldData.length>1){throw new Error("More than one record found for update for table ["+table+"] >> filter>>> "+JSON.stringify(filter)+" >>> found>>>["+oldData.length+"]");}else{oldData.forEach(function(old){var _id=old._id;var oldDoc=db[table][_id];var newDoc=_extends({},oldDoc);for(var k in value.$unset){delete newDoc[k];}for(var k in value.$set){newDoc[k]=value.$set[k];}for(var k in value.$inc){var oldV=newDoc[k];if(oldV===null){throw new Error("Old value can not be null in inc operation for k >> "+k+" in update for table >>"+table+" >>> filter >>>"+JSON.stringify(filter));}else if(typeof oldV=="number"){newDoc[k]=oldV+value.$inc[k];}else if(oldV===undefined){newDoc[k]=value.$inc[k];}else{throw new Error("Old value must be either undefined or type of number for k >> "+k+" in update for table >>"+table+" >>> filter >>>"+JSON.stringify(filter)+" >>> but found >>> "+JSON.stringify(oldV));}}db[table][_id]=newDoc;});return{matched:1,modifed:1};}});});}},{key:"commit",value:function commit(){}},{key:"rollback",value:function rollback(){}},{key:"remove",value:function remove(table,filter){var _this6=this;return this.connectDB().then(function(db){var isFilter=filter&&Object.keys(filter).length;if(!isFilter){throw new Error("Filter must be defined in remove >> table >>["+table+"]");}return _this6.find(table,{filter:filter,fields:{_id:1}}).then(function(oldData){oldData=oldData.result;if(!oldData||oldData.length==0){return{matched:0,removed:0};}else if(oldData.length>1){throw new Error("More than one record found for remove for table ["+table+"] >> filter>>> "+JSON.stringify(filter)+" >>> found>>>["+oldData.length+"]");}else{oldData.forEach(function(old){var _id=old._id;delete db[table][_id];});return{matched:1,removed:1};}});});}}]);return InMemoryConnect;}();function populateResult(fields,fieldValues,data){for(var k in fields){var fieldInfo=fields[k];var value=data[k];fieldValues[k]=value;if(isJSONObject(fieldInfo)){if(Array.isArray(value)){fieldValues[k]=[];for(var i=0;i<value.length;i++){var arrayJSONValue={};populateResult(fieldInfo,arrayJSONValue,value[i]);fieldValues[k][i]=arrayJSONValue;}}else{fieldValues[k]={};populateResult(fieldInfo,fieldValues[k],value);}}else{fieldValues[k]=value;}}}exports.default=InMemoryConnect;