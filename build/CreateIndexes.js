Object.defineProperty(exports,"__esModule",{value:true});exports.getIndexesToCreate=exports.ensureRequiredIndexes=exports.ensureIndexes=undefined;var _DBConnect=require("./DBConnect");var _rhsCommon=require("rhs-common");var deepEqual=_rhsCommon.PureFunctions.deepEqual,deepClone=_rhsCommon.PureFunctions.deepClone;var ensureIndexes=exports.ensureIndexes=function ensureIndexes(modelOperations){var pipeline=_rhsCommon.Pipeline.of("ensure-indexes");modelOperations&&modelOperations.forEach(function(operation){var model=operation._model,modelIndexes=operation._indexes;if(typeof model==="function"){model=model();}var table=model._table;if(!table||!modelIndexes){return;}pipeline.add(function(){return(0,_DBConnect.getIndexes)(table);},function(accum,indexes){return ensureRequiredIndexes(table,indexes,modelIndexes);});});return pipeline;};var ensureRequiredIndexes=exports.ensureRequiredIndexes=function ensureRequiredIndexes(table,mongoIndexes,modelIndexes){var _getIndexesToCreate=getIndexesToCreate(mongoIndexes,modelIndexes),newIndexes=_getIndexesToCreate.newIndexes,dropIndexes=_getIndexesToCreate.dropIndexes;var pipeline=_rhsCommon.Pipeline.of().param({});dropIndexes.forEach(function(index){pipeline.add(function(){return(0,_DBConnect.dropIndex)(table,index.name);});});newIndexes.forEach(function(index){pipeline.add(function(){return(0,_DBConnect.createIndex)(table,index.key,index.options);});});return pipeline;};var getIndexesToCreate=exports.getIndexesToCreate=function getIndexesToCreate(mongoIndexes,modelIndexes){mongoIndexes=deepClone(mongoIndexes);modelIndexes=deepClone(modelIndexes);var mongoIndexesMap=mongoIndexes?mongoIndexes.reduce(function(accum,current){if(current.name!=="_id_"){accum[current.name]=current;}return accum;},{}):{};var indexesToCreate=[];for(var indexName in modelIndexes){var modelIndex=modelIndexes[indexName];modelIndex.name=indexName;if(modelIndex.background===undefined){modelIndex.background=true;}var fields=modelIndex.fields,fts=modelIndex.fts;fts?(modelIndex.weights=modelIndex.fields,modelIndex.key={_fts:"text",_ftsx:1}):modelIndex.key=modelIndex.fields;delete modelIndex.fields;delete modelIndex.fts;var newIndexRequired=true;var mongoIndex=mongoIndexesMap[indexName];if(mongoIndex!==undefined){var requiredIndexFields=getRequiredIndexFields(mongoIndex);if(deepEqual(modelIndex,requiredIndexFields)){newIndexRequired=false;}}if(newIndexRequired){var key={};for(var field in fields){key[field]=fts?"text":1;}indexesToCreate.push({key:key,options:getIndexOptions(modelIndex)});}else{delete mongoIndexesMap[indexName];}}var dropIndexes=[];for(var mongoIndexName in mongoIndexesMap){dropIndexes.push(mongoIndexesMap[mongoIndexName]);}return{newIndexes:indexesToCreate,dropIndexes:dropIndexes};};var getRequiredIndexFields=function getRequiredIndexFields(index){var indexFieldsToMatch={};for(var key in index){if(key==="key"||key==="name"||key==="weights"||key==="sparse"||key==="unique"||key==="background"||key==="expireAfterSeconds"){indexFieldsToMatch[key]=index[key];}}return indexFieldsToMatch;};var getIndexOptions=function getIndexOptions(index){var options={background:true};for(var key in index){if(key==="name"||key==="background"||key==="unique"||key==="sparse"||key==="expireAfterSeconds"){options[key]=index[key];}}return options;};